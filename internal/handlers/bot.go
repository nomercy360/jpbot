package handlers

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	telegram "github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/labstack/echo/v4"
	"io"
	"jpbot/internal/ai"
	"jpbot/internal/db"
	"log"
	"math/rand"
	"strings"
)

type Storager interface {
	GetUser(telegramID int64) (*db.User, error)
	SaveTasksBatch(tasks []db.Exercise) error
	GetExercisesByLevel(level string) ([]db.Exercise, error)
	GetNextExerciseForUser(userID int64, level string, exTypes []string) (db.Exercise, error)
	MarkExerciseSent(userID, exerciseID int64) error
	SaveUser(user *db.User) error
	UpdateUser(user *db.User) error
	GetExerciseByID(exerciseID int64) (db.Exercise, error)
	SaveSubmission(submission db.Submission) error
	ClearUserExercise(userID int64) error
	UpdateUserLevel(userID int64, level string) error
	CountUsers() (int, error)
	GetNextWordForUser(userID int64, level string) (db.Word, error)
	GetWordByID(wordID int64) (db.Word, error)
	SaveWordReview(submission db.TranslationSubmission) error
	MarkWordSent(userID, wordID int64) error
	ClearUserWord(userID int64) error
	UpdateUserRanking(userID int64, score int) error
	GetLeaderboard(periodType db.PeriodType, limit int) ([]db.LeaderboardEntry, error)
	GetUsersPaginated(limit, offset int) ([]db.User, error)
}

type OpenAIClient interface {
	CheckExercise(s db.Submission) (ai.ExerciseFeedback, error)
	GenerateAudio(text string) (io.ReadCloser, error)
	CheckWordTranslation(word, translation, userInput string) (ai.WordTranslationEvaluation, error)
	ExplainSentence(sentence string) (string, error)
}

type handler struct {
	bot          *telegram.Bot
	db           Storager
	openaiClient OpenAIClient
	jwtSecret    string
	botToken     string
}

func NewHandler(
	bot *telegram.Bot,
	db Storager,
	openaiClient *ai.Client,
	jwtSecret string,
	botToken string,
) *handler {
	return &handler{
		bot:          bot,
		db:           db,
		openaiClient: openaiClient,
		jwtSecret:    jwtSecret,
		botToken:     botToken,
	}
}

func (h *handler) HandleWebhook(c echo.Context) error {
	var update tgbotapi.Update
	if err := c.Bind(&update); err != nil {
		log.Printf("Failed to bind update: %v", err)
		return c.NoContent(400)
	}

	if update.Message == nil && update.CallbackQuery == nil {
		return c.NoContent(200)
	}

	resp := h.handleUpdate(update)
	if _, err := h.bot.SendMessage(context.Background(), resp); err != nil {
		log.Printf("Failed to send message: %v", err)
	}

	return c.NoContent(200)
}

func (h *handler) handleUpdate(update tgbotapi.Update) (msg *telegram.SendMessageParams) {
	var chatID int64
	var firstName, lastName *string
	var username *string
	if update.Message != nil {
		chatID = update.Message.From.ID
		firstName = &update.Message.From.FirstName
		lastName = &update.Message.From.LastName
		username = &update.Message.From.UserName
	} else if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.From.ID
		firstName = &update.CallbackQuery.From.FirstName
		lastName = &update.CallbackQuery.From.LastName
		username = &update.CallbackQuery.From.UserName
	}

	if username == nil {
		usernameFromID := fmt.Sprintf("user_%d", chatID)
		username = &usernameFromID
	}

	user, err := h.db.GetUser(chatID)

	msg = &telegram.SendMessageParams{
		ChatID: chatID,
	}

	if err != nil && errors.Is(err, db.ErrNotFound) {
		imgUrl := fmt.Sprintf("%s/avatars/%d.svg", "https://assets.peatch.io", rand.Intn(30)+1)

		newUser := &db.User{
			TelegramID: chatID,
			Username:   username,
			FirstName:  firstName,
			LastName:   lastName,
			AvatarURL:  &imgUrl,
			Level:      db.LevelN5,
		}

		if err := h.db.SaveUser(newUser); err != nil {
			log.Printf("Failed to save user: %v", err)
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
		} else {
			msg.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."
		}

		user, err = h.db.GetUser(chatID)
		if err != nil {
			log.Printf("Failed to get user after saving: %v", err)
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
		}
	} else if err != nil {
		log.Printf("Failed to get user: %v", err)
		msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
	} else if user.AvatarURL == nil {

		imgUrl := fmt.Sprintf("%s/avatars/%d.svg", "https://assets.peatch.io", rand.Intn(30)+1)

		newUser := &db.User{
			TelegramID: chatID,
			Username:   username,
			FirstName:  firstName,
			LastName:   lastName,
			AvatarURL:  &imgUrl,
		}

		if err := h.db.UpdateUser(newUser); err != nil {
			log.Printf("Failed to update user: %v", err)
		}
	}

	// check if a message is not a command but a callback
	if update.CallbackQuery != nil {
		if strings.HasPrefix(update.CallbackQuery.Data, "level:") {
			level := strings.TrimPrefix(update.CallbackQuery.Data, "level:")
			if db.IsValidLevel(level) {
				if err := h.db.UpdateUserLevel(chatID, level); err != nil {
					log.Printf("Failed to update user level: %v", err)
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
				} else {
					msg.Text = fmt.Sprintf("–£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s!", level)
				}
			} else {
				msg.Text = "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
			}

			ack := telegram.AnswerCallbackQueryParams{
				CallbackQueryID: update.CallbackQuery.ID,
				Text:            msg.Text,
				ShowAlert:       false,
				CacheTime:       0,
			}

			if ok, err := h.bot.AnswerCallbackQuery(
				context.Background(),
				&ack,
			); err != nil {
				log.Printf("Failed to answer callback query: %v", err)
			} else if !ok {
				log.Printf("Failed to answer callback query: %v", err)
			} else {
				log.Printf("Answered callback query: %s", msg.Text)
			}

			return
		}
	}

	switch update.Message.Command() {
	case "users":
		count, err := h.db.CountUsers()
		if err != nil {
			log.Printf("Failed to get users: %v", err)
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
		} else {
			msg.Text = fmt.Sprintf("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", count)
		}
	case "start":
		msg.Text = "–ü—Ä–∏–≤–µ—Ç\\! –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–ø–æ–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\\. –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É\\!\n\n" +
			"*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n" +
			"\\- /task ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ \\(–ø–µ—Ä–µ–≤–æ–¥, –≤–æ–ø—Ä–æ—Å, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏–ª–∏ –∞—É–¥–∏–æ\\)\\.\n" +
			"\\- /vocab ‚Äî —É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\\.\n" +
			"\\- /level ‚Äî –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \\(N5, N4, N3\\)\\.\n" +
			"ü§ñ –û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç AI, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Å–æ–≤–µ—Ç—ã\\. –ù–∞—á–∏–Ω–∞–π —Å /task –∏–ª–∏ /vocab\\!\n\n" +
			"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @jpbot\\_learn\\_japanese\\. –¢–∞–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ñ–∏—á\\."
		msg.ParseMode = models.ParseModeMarkdown
	case "task":
		if user.CurrentExerciseID != nil {
			msg.Text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å –µ–≥–æ!"
			break
		}

		types := []string{db.ExerciseTypeQuestion, db.ExerciseTypeTranslation, db.ExerciseTypeGrammar, db.ExerciseTypeAudio}

		exercise, err := h.db.GetNextExerciseForUser(chatID, user.Level, types)
		if err != nil && errors.Is(err, db.ErrNotFound) {
			msg.Text = "–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞!"
		} else if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
			log.Printf("Failed to get next exercise: %v", err)
		} else {
			switch exercise.Type {
			case db.ExerciseTypeQuestion:
				c, _ := db.ContentAs[db.QuestionContent](exercise.Content)
				msg.Text = fmt.Sprintf("–ó–∞–¥–∞–Ω–∏–µ:\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: %s\n\n–ò—Å–ø–æ–ª—å–∑—É–π /explain –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏", c.Question)
			case db.ExerciseTypeTranslation:
				c, _ := db.ContentAs[db.SentenceContent](exercise.Content)
				msg.Text = fmt.Sprintf("–ó–∞–¥–∞–Ω–∏–µ:\n\n–ü–µ—Ä–µ–≤–µ–¥–∏: %s", c.Russian)
			case db.ExerciseTypeGrammar:
				c, _ := db.ContentAs[db.GrammarContent](exercise.Content)
				msg.Text = fmt.Sprintf("üîπ*–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞:* %s\nüí°*–ó–Ω–∞—á–µ–Ω–∏–µ:* %s\nüß±*–°—Ç—Ä—É–∫—Ç—É—Ä–∞:* %s\n*üó£–ü—Ä–∏–º–µ—Ä:* %s\n\n–¢–≤–æ–π –ø—Ä–∏–º–µ—Ä:",
					telegram.EscapeMarkdown(c.Grammar),
					telegram.EscapeMarkdown(c.Meaning),
					telegram.EscapeMarkdown(c.Structure),
					telegram.EscapeMarkdown(c.Example),
				)
				msg.ParseMode = models.ParseModeMarkdown
			case db.ExerciseTypeAudio:
				c, _ := db.ContentAs[db.AudioContent](exercise.Content)
				msg.Text = fmt.Sprintf("–ó–∞–¥–∞–Ω–∏–µ:\n\n–ü—Ä–æ—Å–ª—É—à–∞–π –∞—É–¥–∏–æ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: %s\n\n–ò—Å–ø–æ–ª—å–∑—É–π /explain –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏", c.Question)

				audioReader, err := h.openaiClient.GenerateAudio(c.Text)
				if err != nil {
					log.Printf("Failed to generate audio: %v", err)
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
					return
				}
				defer audioReader.Close()

				// –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–∞–º—è—Ç—å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ os.ReadFile –≤ –ø—Ä–∏–º–µ—Ä–µ)
				audioData, err := io.ReadAll(audioReader)
				if err != nil {
					log.Printf("Failed to read audio data: %v", err)
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
					return
				}

				params := &telegram.SendVoiceParams{
					ChatID: chatID,
					Voice: &models.InputFileUpload{
						Filename: "voice.ogg", // Telegram —Ç—Ä–µ–±—É–µ—Ç –∏–º—è
						Data:     bytes.NewReader(audioData),
					},
				}

				if _, err := h.bot.SendVoice(context.Background(), params); err != nil {
					log.Printf("Failed to send audio: %v", err)
					msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
					return
				}
			}
			if err := h.db.MarkExerciseSent(user.ID, exercise.ID); err != nil {
				log.Printf("Failed to mark exercise as sent: %v", err)
			}
		}
	case "vocab":
		if user.CurrentWordID != nil {
			msg.Text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å –µ–≥–æ!"
			break
		}
		word, err := h.db.GetNextWordForUser(user.ID, user.Level)
		if err != nil && errors.Is(err, db.ErrNotFound) {
			msg.Text = "–°–ª–æ–≤–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞!"
		} else if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
			log.Printf("Failed to get next word: %v", err)
		} else {
			msg.Text = fmt.Sprintf("–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *%s*", telegram.EscapeMarkdown(word.Translation))
			msg.ParseMode = models.ParseModeMarkdown
			if err := h.db.MarkWordSent(chatID, word.ID); err != nil {
				log.Printf("Failed to mark word as sent: %v", err)
			}
		}
	case "explain":
		if user.CurrentExerciseID == nil {
			msg.Text = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /task."
			break
		}
		exercise, err := h.db.GetExerciseByID(*user.CurrentExerciseID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è."
			log.Printf("Failed to get exercise: %v", err)
			break
		}

		var sentence string
		if exercise.Type == db.ExerciseTypeQuestion {
			c, _ := db.ContentAs[db.QuestionContent](exercise.Content)
			sentence = c.Question
		} else if exercise.Type == db.ExerciseTypeAudio {
			c, _ := db.ContentAs[db.AudioContent](exercise.Content)
			sentence = c.Text
		} else {
			msg.Text = "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∞—É–¥–∏–æ."
			break
		}

		go func() {
			if _, err := h.bot.SendChatAction(context.Background(), &telegram.SendChatActionParams{
				ChatID: chatID,
				Action: models.ChatActionTyping,
			}); err != nil {
				log.Printf("Failed to send typing action: %v", err)
			}
		}()

		explanation, err := h.openaiClient.ExplainSentence(sentence)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏."
			log.Printf("Failed to explain sentence: %v", err)
			break
		}
		msg.Text = explanation
	case "answer":
		if user.CurrentWordID == nil {
			msg.Text = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Å–ª–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /vocab."
			break
		}

		word, err := h.db.GetWordByID(*user.CurrentWordID)
		if err != nil {
			msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞."
			log.Printf("Failed to get word: %v", err)
			break
		}

		var exampleText string
		if len(word.Examples) > 0 {
			var parts []string
			for _, s := range word.Examples[0].Sentence {
				if s.Furigana != nil {
					parts = append(parts, fmt.Sprintf("%s(%s)", s.Fragment, *s.Furigana))
				} else {
					parts = append(parts, s.Fragment)
				}
			}
			jap := strings.Join(parts, "")
			exampleText = fmt.Sprintf("\n\n–ü—Ä–∏–º–µ—Ä: %s\n%s\n\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:", jap, word.Examples[0].Translation)
		}

		msg.Text = fmt.Sprintf("%s%s", word.GetKanji(), exampleText)
		submission := db.TranslationSubmission{
			UserID:    user.ID,
			WordID:    word.ID,
			IsCorrect: false,
		}

		if err := h.db.SaveWordReview(submission); err != nil {
			log.Printf("Failed to save word review: %v", err)
		}
	case "reset":
		if err := h.db.ClearUserExercise(chatID); err != nil {
			log.Printf("Failed to clear user exercise: %v", err)
		}
		msg.Text = "–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /task –∏–ª–∏ /vocab –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
	case "level":
		msg.Text = "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("N5", "level:N5"),
				tgbotapi.NewInlineKeyboardButtonData("N4", "level:N4"),
				tgbotapi.NewInlineKeyboardButtonData("N3", "level:N3"),
				//tgbotapi.NewInlineKeyboardButtonData("N2", "level:N2"),
				//tgbotapi.NewInlineKeyboardButtonData("N1", "level:N1"),
			),
		)

		msg.ReplyMarkup = &keyboard
	default:
		if user.CurrentExerciseID != nil && user.CurrentMode == db.ModeExercise {
			userInput := update.Message.Text
			exercise, err := h.db.GetExerciseByID(*user.CurrentExerciseID)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è."
				log.Printf("Failed to get exercise: %v", err)
				break
			}

			submission := db.Submission{
				UserID:     chatID,
				ExerciseID: exercise.ID,
				UserInput:  userInput,
				Exercise:   exercise,
			}

			feedback, err := h.openaiClient.CheckExercise(submission)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞."
				log.Printf("Failed to check exercise: %v", err)
				break
			}

			feedbackText := fmt.Sprintf("%s", feedback.Comment)
			if feedback.Suggestion != "" {
				feedbackText += fmt.Sprintf("\n\n%s", feedback.Suggestion)
			}

			submission.GPTFeedback = feedbackText
			submission.IsCorrect = feedback.Score >= 80

			if submission.IsCorrect {
				msg.Text = fmt.Sprintf("–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\! üéâ\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π /task\\.")
				msg.ParseMode = models.ParseModeMarkdown
				user.CurrentExerciseID = nil
				if err := h.db.ClearUserExercise(chatID); err != nil {
					log.Printf("Failed to save user: %v", err)
				}
				// Update rankings
				if err := h.db.UpdateUserRanking(user.TelegramID, 1); err != nil {
					log.Printf("Failed to update user ranking: %v", err)
				}
			} else {
				msg.Text = fmt.Sprintf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\\.\n\n%s\n%s\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
					telegram.EscapeMarkdown(feedback.Comment),
					telegram.EscapeMarkdown(feedback.Suggestion))
				msg.ParseMode = models.ParseModeMarkdown
			}

			if err := h.db.SaveSubmission(submission); err != nil {
				log.Printf("Failed to save submission: %v", err)
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."
			}
		} else if user.CurrentWordID != nil && user.CurrentMode == db.ModeVocab {
			userInput := update.Message.Text
			word, err := h.db.GetWordByID(*user.CurrentWordID)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞."
				log.Printf("Failed to get word: %v", err)
				break
			}

			res, err := h.openaiClient.CheckWordTranslation(word.GetKanji(), word.Translation, userInput)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞."
				log.Printf("Failed to check word translation: %v", err)
				break
			}

			isCorrect := res.Score >= 80

			submission := db.TranslationSubmission{
				UserID:      user.ID,
				WordID:      word.ID,
				Translation: word.Translation,
				IsCorrect:   isCorrect,
			}

			if err := h.db.SaveWordReview(submission); err != nil {
				log.Printf("Failed to save word review: %v", err)
			}

			if isCorrect {
				nextWord, err := h.db.GetNextWordForUser(user.ID, user.Level)
				if err != nil && errors.Is(err, db.ErrNotFound) {
					log.Printf("No more words for user: %v", err)
					msg.Text = "–°–ª–æ–≤–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\\. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞\\!"
				} else if err != nil {
					log.Printf("Failed to get next word: %v", err)
				}

				msg.Text = fmt.Sprintf("–ü—Ä–∞–≤–∏–ª—å–Ω–æ\\! üéâ\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: *%s*\n\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∏—Å–ø–æ–ª—å–∑—É–π /answer", telegram.EscapeMarkdown(nextWord.Translation))

				msg.ParseMode = models.ParseModeMarkdown
				if err := h.db.MarkWordSent(chatID, nextWord.ID); err != nil {
					log.Printf("Failed to mark word as sent: %v", err)
				}
				// Update rankings
				if err := h.db.UpdateUserRanking(user.TelegramID, 1); err != nil {
					log.Printf("Failed to update user ranking: %v", err)
				}
			} else {
				msg.Text = fmt.Sprintf("%s\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:", res.Comment)
			}
		} else {
			msg.Text = "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π /task –∏–ª–∏ /vocab.\n\n" +
				"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–π /level.\n\n"
		}

	}

	return msg
}
